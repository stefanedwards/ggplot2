{
    "contents" : "#' Label facets with their value.\n#' This is the default labelling scheme.\n#' \n#' @param variable variable name passed in by facetter\n#' @param value variable value passed in by facetter\n#' @family facet labellers\n#' @export\n#' @examples\n#' p <- qplot(wt, mpg, data = mtcars)\n#' p + facet_grid(. ~ cyl)\n#' p + facet_grid(. ~ cyl, labeller = label_value)\nlabel_value <- function(variable, value) as.character(value)\n\n#' Label facets with value and variable.\n#' \n#' @param variable variable name passed in by facetter\n#' @param value variable value passed in by facetter\n#' @family facet labellers\n#' @export\n#' @examples\n#' p <- qplot(wt, mpg, data = mtcars)\n#' p + facet_grid(. ~ cyl)\n#' p + facet_grid(. ~ cyl, labeller = label_both)\nlabel_both <- function(variable, value) paste(variable, value, sep = \": \")\n\n#' Label facets with parsed label.\n#' \n#' @seealso \\code{\\link{plotmath}}\n#' @param variable variable name passed in by facetter\n#' @param value variable value passed in by facetter\n#' @family facet labellers\n#' @export\n#' @examples\n#' mtcars$cyl2 <- factor(mtcars$cyl, labels = c(\"alpha\", \"beta\", \"gamma\"))\n#' qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2)\n#' qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, \n#'   labeller = label_parsed)\nlabel_parsed <- function(variable, value) {\n  llply(as.character(value), function(x) parse(text = x))\n}\n\n#' Label facet with 'bquoted' expressions\n#' \n#' See \\code{\\link{bquote}} for details on the syntax of the argument.  The\n#' label value is x. \n#' \n#' @param expr labelling expression to use\n#' @family facet labellers\n#' @seealso \\code{\\link{plotmath}}\n#' @export\n#' @examples\n#' p <- qplot(wt, mpg, data = mtcars)\n#' p + facet_grid(. ~ vs, labeller = label_bquote(alpha ^ .(x)))\n#' p + facet_grid(. ~ vs, labeller = label_bquote(.(x) ^ .(x)))\nlabel_bquote <- function(expr = beta ^ .(x)) {\n  quoted <- substitute(expr)\n  \n  function(variable, value) {\n    value <- as.character(value)\n    lapply(value, function(x)\n      eval(substitute(bquote(expr, list(x = x)), list(expr = quoted))))\n  }\n}\n\n#' Label facets with a word wrapped label.\n#' \n#' Uses \\code{\\link[base]{strwrap}} for line wrapping.\n#' @param width integer, target column width for output.\n#' @export\n#' @seealso , \\code{\\link{labeller}}\n#' @examples\n#' set.seed(331)\n#' x=runif(60)\n#' y=rnorm(60)\n#' speed=sample(c('Prime group', 'Rib group', 'No group'), 60, replace=TRUE)\n#' group=sample(letters[1:3], 60, replace=TRUE)\n#' \n#' df = data.frame(x=x, y=y, speed=as.factor(speed), group=as.factor(group))\n#' group.names <- c('a'='First','b'='Second','c'=\"Don\\'t\")\n#' \n#' ggplot(df, aes(x, y)) + geom_point() + facet_grid(speed ~ group, labeller=label_wrap_gen(3))\n#' ggplot(df, aes(x, y)) + geom_point() + facet_grid(speed ~ group, labeller=labeller(speed=label_wrap_gen(3), group=group.names))\nlabel_wrap_gen <- function(width = 25) {\n  function(variable, value) {\n    lapply(strwrap(as.character(value), width=width, simplify=FALSE), \n           paste, collapse=\"\\n\")\n  }\n}\n\n#' Generic labeller function for facets\n#' \n#' One-step function for providing methods or named character vectors\n#' as labels in facets.\n#'\n#' @param keep.as.numbers logical, default TRUE. When FALSE, converts numeric values supplied as margins to the facet to characters.\n#' @family facet labeller\n#' @return Function to supply to \\code{\\link{facet_grid}} for the argument \\code{labeller}.\n#' @export \n#' @examples\n#' numbers <- c(`4`='four', `6`='six', `8`='eight')\n#' vs <- c(`0`='No vs', `1`='vs')\n#' p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()\n#' p + facet_grid(vs~cyl, labeller=labeller(cyl=numbers, vs=vs))\nlabeller <- function(keep.as.numeric=FALSE, ...) {\n  args <- list(...)\n  lbl <- function(variable, values) {\n    res <- args[[variable]]\n    if (is.numeric(values) & !keep.as.numeric) values <- as.character(values)\n    #print(str(variable))\n    #print(str(values))\n    \n    if (is.null(res)) {\n      if (is.factor(values)) return(levels(values[drop=TRUE]))\n      return(values)\n    }\n    if (is.function(res)) return(res(variable, values))\n    if (is.logical(values)) values <- as.integer(values)+1\n    if (is.factor(values)) values <- levels(values)[values]\n    return(res[values])\n  }\n  return(lbl)\n}\n\n\n\n# Grob for strip labels\nggstrip <- function(text, horizontal=TRUE, theme) {\n  text_theme <- if (horizontal) \"strip.text.x\" else \"strip.text.y\"\n  if (is.list(text)) text <- text[[1]]\n\n  label <- element_render(theme, text_theme, text)\n\n  ggname(\"strip\", absoluteGrob(\n    gList(\n      element_render(theme, \"strip.background\"),\n      label\n    ),\n    width = grobWidth(label) + unit(0.5, \"lines\"),\n    height = grobHeight(label) + unit(0.5, \"lines\")\n  ))\n}\n",
    "created" : 1391521489199.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3399979365",
    "id" : "D86377F7",
    "lastKnownWriteTime" : 1391522077,
    "path" : "C:/Users/STME/GitHub/ggplot2/R/facet-labels.r",
    "project_path" : "R/facet-labels.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}